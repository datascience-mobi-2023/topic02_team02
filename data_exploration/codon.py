import pandas as pd
import numpy as np
import data_cleanup as dc
from Bio.Seq import Seq
import data_exploration as de

dna_sequence: str = 'ATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCGACATAGTGTGGTGGTGCCCTATGAGCCGCCTGAGGTTGGCTCTGACTGTACCACCATCCACTACAACTACATGTGTAACAGTTCCTGCATGGGCGGCATGAACCGGAGGCCCATCCTCACCATCATCACACTGGAAGACTCCAGTGGTAATCTACTGGGACGGAACAGCTTTGAGGTGCGTGTTTGTGCCTGTCCTGGGAGAGACCGGCGCACAGAGGAAGAGAATCTCCGCAAGAAAGGGGAGCCTCACCACGAGCTGCCCCCAGGGAGCACTAAGCGAGCACTGCCCAACAACACCAGCTCCTCTCCCCAGCCAAAGAAGAAACCACTGGATGGAGAATATTTCACCCTTCAGATCCGTGGGCGTGAGCGCTTCGAGATGTTCCGAGAGCTGAATGAGGCCTTGGAACTCAAGGATGCCCAGGCTGGGAAGGAGCCAGGGGGGAGCAGGGCTCACTCCAGCCACCTGAAGTCCAAAAAGGGTCAGTCTACCTCCCGCCATAAAAAACTCATGTTCAAGACAGAAGGGCCTGACTCAGAC'
rna_sequence = dna_sequence.replace("T", "U")
p53_codons = [rna_sequence[i:i+3] for i in range(0, len(rna_sequence), 3)]


def translate_codons_df(df: pd.DataFrame) -> pd.DataFrame:
    translated_df = pd.DataFrame()

    for column in df.columns:
        codons = df[column]
        seqs = [Seq(codon) for codon in codons]
        amino_acids = [seq.translate() for seq in seqs]
        translated_df[column] = amino_acids

    return translated_df.astype(str)


def generate_codon_variations(codons: list) -> pd.DataFrame:
    variations: list = []
    for codon in codons:
        variation: list = [codon]
        for i in range(3):
            bases = ['A', 'U', 'G', 'C']
            bases.remove(codon[i])
            variation.extend([codon[:i] + base + codon[i+1:] for base in bases])
        variations.append(variation)

    df = pd.DataFrame(variations)
    df.columns = ['Original'] + [f'Variation {i+1}' for i in range(9)]
    return df


def prob_as_position(position: int, variation_matrix: pd.DataFrame) -> pd.Series:
    """Function returning the probability for each AMS, resulting from a single mutation in the codon as pd.Series"""

    res: pd.Series = variation_matrix.loc[position].value_counts(normalize=True)

    return res.drop(variation_matrix.Original.iloc[position])


def exchange_prob_dict(frame: pd.DataFrame) -> dict:
    """Function returns dict containing a pd.Series to each position of the sequence. The series contains all possible
    variations through single base mutations, as well as their probability."""
    res: dict = {}
    for position in range(0, frame.shape[0]-1):
        res[position] = prob_as_position(position, frame).drop(frame.Original.loc[position])

    return res


def select_smut(DMS_scores: pd.DataFrame, aa_var: pd.DataFrame) -> pd.DataFrame:
    """Takes in a df directly from the DMS_data dataset and a df showing all AA variations for each position.
    Returns a df, that selects only the DMS_scores for AA that are generated by a single mutation"""
    aa_var_cleaned = aa_var.replace("*", np.nan)

    single_mutations = pd.DataFrame()

    for position in range(0, DMS_scores.shape[0]):
        mut_per_pos = prob_as_position(position, aa_var_cleaned).index
        selected_columns_df = DMS_scores.loc[position + 1, mut_per_pos]
        single_mutations = pd.concat([single_mutations, selected_columns_df], ignore_index=True)
    # used pd.concat instead of DataFrame.append, because it won't be supported in future versions

    return single_mutations


# next -> which probable variations did show an increased fitness score? Is there an AMS with increased DMS score, that
# is not probable by single base Mutation?


if __name__ == '__main__':
    p53_var_frame: pd.DataFrame = translate_codons_df(generate_codon_variations(p53_codons))
    gia_null_eto: pd.DataFrame = pd.read_csv('../DMS_data/P53_HUMAN_Giacomelli_NULL_Etoposide_2018.csv')
    df = dc.min_max_norm(dc.df_transform_inverse(gia_null_eto))

    sel_mut: pd.DataFrame = select_smut(df, p53_var_frame)
    pass
